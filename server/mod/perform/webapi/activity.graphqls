"""
Represents the state an activity is in
"""
type mod_perform_activity_state {
  code: Int!
  name: mod_perform_activity_state_enums!
  display_name: String!
}

"""
Represents the activity settings.
"""
type mod_perform_activity_settings {
  close_on_completion: Boolean!
  multisection: Boolean!
  visibility_condition: mod_perform_visibility_condition_option!
}

"""
Represents the response visibility condition option
"""
type mod_perform_visibility_condition_option {
  name: String!
  value: Int!
  participant_description: String
  view_only_participant_description: String!
}

"""
This is generic performance activity
"""
type mod_perform_activity {
  id: core_id
  name(format: core_format = PLAIN): String!
  type: mod_perform_activity_type!
  description(format: core_format = PLAIN): String
  updated_at(format: core_date_format = TIMESTAMP): core_date
  can_view_participation_reporting: Boolean! # Whether the current user can view the participation tracking for the activity
  can_potentially_activate: Boolean! # Whether this activity could be activated due to capability checks and current status, without checking further conditions
  can_activate: Boolean! # Whether the current user can activate this activity, only if it satisfies all conditions
  can_manage: Boolean! # Whether the current user can manage this activity
  can_clone: Boolean! # Whether the current user can clone this activity
  sections: [mod_perform_section!]!
  state_details: mod_perform_activity_state!
  settings: mod_perform_activity_settings!
  visibility_condition_options: [mod_perform_visibility_condition_option!]
  anonymous_responses: Boolean! # If true all responses will be anonymized
  manual_relationships: [mod_perform_manual_relationship!]!
  context_id: core_id!
}

"""
An element plugin which can be used to create an element
"""
type mod_perform_element_plugin {
  plugin_name: String!
  name: String!
  admin_form_component: String!
  admin_display_component: String!
  admin_read_only_display_component: String!
  participant_form_component: String!
  participant_response_component: String!
  group: String!
}

"""
An element identifier
"""
type mod_perform_element_identifier {
  id: core_id!
  identifier(format: core_format = PLAIN): String!
}

"""
An element in the element library
"""
type mod_perform_element {
  id: core_id!
  element_plugin: mod_perform_element_plugin!
  title(format: core_format = PLAIN): String!
  identifier: String
  data(format: core_format = PLAIN): String
  is_required: Boolean
  is_respondable: Boolean!
}

"""
A validation error
"""
type mod_perform_validation_error {
  error_code: String!
  error_message: String!
}

"""
Details about perform activity that a user is involved with (either the subject or an answering participant)
"""
type mod_perform_subject_instance {
  id: core_id!
  activity: mod_perform_activity!
  progress_status: mod_perform_subject_instance_progress_status!
  availability_status: mod_perform_subject_instance_availability_status!
  created_at(format: core_date_format = DATE): core_date!
  due_date(format: core_date_format = DATETIME): core_date
  is_overdue: Boolean!
  subject_user: mod_perform_participant!
  participant_instances: [mod_perform_participant_instance!]!
  job_assignment: totara_job_assignment
  instance_count: Int
  static_instances: [totara_job_assignment!]!
}

type mod_perform_historic_activity {
  activity_name: String,
  activity_link: String,
  type: String,
  status: String
}

type mod_perform_other_historic_activity {
  activity_name: String,
  activity_link: String,
  type: String,
  subject_user: String,
  relationship_to: String,
  status: String
}

"""
Details about a participant_instance
"""
type mod_perform_participant_instance {
  id: core_id!
  participant_id: core_id
  is_for_current_user: Boolean!
  participant_sections: [mod_perform_participant_section!]!
  participant: mod_perform_participant
  progress_status: mod_perform_participant_instance_progress_status!
  availability_status: mod_perform_participant_instance_availability_status!
  is_overdue: Boolean!
  core_relationship: totara_core_relationship
  subject_instance: mod_perform_subject_instance
  created_at(format: core_date_format = DATE): core_date!
}

"""
Available sources of a participant.
"""
enum mod_perform_participant_source_enum {
  INTERNAL
  EXTERNAL
}

"""
Participant user.
"""
type mod_perform_participant {
  source: mod_perform_participant_source_enum!
  id: core_id!
  fullname: String
  email: String
  profileimageurlsmall: String
  card_display: core_user_card_display
}

"""
Details about perform activity that a user is involved with associated activity
sections.
"""
type mod_perform_subject_sections {
  subject: mod_perform_subject_instance!
  sections: [mod_perform_section_participants!]!
}

"""
Details about an activity section and their participants
"""
type mod_perform_section_participants {
  can_participate: Boolean!
  section: mod_perform_section!
  participant_sections: [mod_perform_participant_section!]!
}

"""
A list of possible states that a performance activity can be in
"""
enum mod_perform_activity_state_enums {
  DRAFT
  ACTIVE
}

"""
A list of possible progress states that a subject instance can be in
"""
enum mod_perform_subject_instance_progress_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
  NOT_SUBMITTED
  PROGRESS_NOT_APPLICABLE
}
"""
A list of possible availability states that a subject instance can be in
"""
enum mod_perform_subject_instance_availability_status {
  OPEN
  CLOSED
  AVAILABILITY_NOT_APPLICABLE
}

"""
A list of possible progress states that a participant instance can be in
"""
enum mod_perform_participant_instance_progress_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
  NOT_SUBMITTED
  PROGRESS_NOT_APPLICABLE
}

"""
A list of possible availability states that a participant instance can be in
"""
enum mod_perform_participant_instance_availability_status {
  OPEN
  CLOSED
  AVAILABILITY_NOT_APPLICABLE
}

"""
Input type for deleting an activity
"""
input mod_perform_delete_activity_input {
  activity_id: core_id!
}

"""
Input for activity settings toggle.
"""
input toggle_activity_setting {
  activity_id: core_id!
  setting: Boolean!
}

"""
Activity subject instance filters
"""
input mod_perform_subject_instance_filters {
  about: [mod_perform_subject_instance_about_filter!]!
}

enum mod_perform_subject_instance_about_filter {
  SELF
  OTHERS
}

extend type Query {
  """
  A list of all performance activities that the current user can administer
  """
  mod_perform_activities: [mod_perform_activity!]!

  """
  A list of all performance activities that the current user can manage participants on
  """
  mod_perform_participant_manageable_activities: [mod_perform_activity!]!

  """
  This query returns a single performance activity
  """
  mod_perform_activity(activity_id: core_id!): mod_perform_activity

  """
  The number of users that will be assigned to an activity upon activation
  """
  mod_perform_activity_users_to_assign_count(activity_id: core_id!): Int

  """
  A list of all element types that can be used to create elements
  """
  mod_perform_element_plugins: [mod_perform_element_plugin!]!

  """
  A list of reportable activities
  """
  mod_perform_reportable_activities: [mod_perform_activity!]!

  """
  A list of reportable element_identifier!
  """
  mod_perform_reportable_element_identifiers: [mod_perform_element_identifier!]!

  """
  A particular participant instance
  """
  mod_perform_participant_instance(
    participant_instance_id: core_id!
  ): mod_perform_participant_instance

  """
  A list of all performance activities the current user is participating in.
  This can be filtered to show only the ones the user is the subject in and
  the ones the user is not the subject in but participating.
  """
  mod_perform_my_subject_instances(
    filters: mod_perform_subject_instance_filters
  ): [mod_perform_subject_sections!]!

  """
  A specific performance activity (perform_subject_instance) a user is participating in
  """
  mod_perform_subject_instance_for_participant(
    subject_instance_id: core_id!
  ): mod_perform_subject_instance

  """
  A specific performance activity (perform_subject_instance) a user is participating in
  only accessible for external users with a valid token
  """
  mod_perform_subject_instance_for_external_participant(
    subject_instance_id: core_id!
    token: String
  ): mod_perform_subject_instance

  """
  Get a single element
  """
  mod_perform_element(element_id: core_id): mod_perform_element

  """
  A list of all appraisal/feedback360 activities the current user is participating in.
  This can be filtered to show only the ones the user is the subject in and
  the ones the user is not the subject in but participating.
  """
  mod_perform_historic_activities: [mod_perform_historic_activity!]!

  """
  A list of all appraisal/feedback360 activities the current user is participating in.
  This can be filtered to show only the ones the user is the subject in and
  the ones the user is not the subject in but participating.
  """
  mod_perform_other_historic_activities: [mod_perform_other_historic_activity!]!
}

"""
Create a new element and add it to a section
"""
input mod_perform_create_new_element_input {
  plugin_name: param_text!
  title: param_text!
  is_required: param_boolean
  identifier: param_text!
  data: String
  sort_order: param_integer!
}

"""
Link to an existing element
"""
input mod_perform_create_link_element_input {
  element_id: core_id!
  sort_order: param_integer!
}

"""
Update an existing element
"""
input mod_perform_update_element_input {
  element_id: core_id!
  title: param_text!
  identifier: param_text
  is_required: param_boolean
  data: String! # We cannot use param_text here as it would do some cleaning
}

"""
Input type for activating an activity
"""
input mod_perform_activate_activity_input {
  activity_id: core_id!
}

"""
Input type for cloning an activity
"""
input mod_perform_clone_activity_input {
  activity_id: core_id!
}

"""
Mutation return type including a clone activity
"""
type mod_perform_clone_activity_result {
  activity: mod_perform_activity!
}

"""
Mutation return type including an activity
"""
type mod_perform_activate_activity_result {
  activity: mod_perform_activity!
}

"""
Mutation return type including an activity
"""
type mod_perform_activity_result {
  activity: mod_perform_activity!
}

extend type Mutation {
  mod_perform_create_activity(
    name: param_text!
    description: param_text
    type: core_id!
  ): mod_perform_activity_result!

  mod_perform_update_activity(
    activity_id: core_id!
    name: param_text!
    description: param_text
    type_id: core_id
    anonymous_responses: param_boolean
    visibility_condition: param_integer
    relationships: [mod_perform_activity_manual_relationship_selection_input!]
  ): mod_perform_activity_result!

  """
  Activate an activity
  """
  mod_perform_activate_activity(
    input: mod_perform_activate_activity_input!
  ): mod_perform_activate_activity_result!

  """
  Clone an activity
  """
  mod_perform_clone_activity(
    input: mod_perform_clone_activity_input!
  ): mod_perform_clone_activity_result!

  """
  Delete an activity
  """
  mod_perform_delete_activity(
    input: mod_perform_delete_activity_input!
  ): Boolean!

  """
  Update an activity setting: close on completion.
  """
  mod_perform_toggle_activity_close_on_completion_setting(
    input: toggle_activity_setting!
  ): mod_perform_activity!
}
