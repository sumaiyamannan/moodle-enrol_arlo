/* This file is part of Totara Enterprise Extensions.*/
/**/
/* Copyright (C) 2020 onwards Totara Learning Solutions LTD*/
/**/
/* Totara Enterprise Extensions is provided only to Totara*/
/* Learning Solutions LTD's customers and partners, pursuant to*/
/* the terms and conditions of a separate agreement with Totara*/
/* Learning Solutions LTD or its affiliate.*/
/**/
/* If you do not have an agreement with Totara Learning Solutions*/
/* LTD, you may not access, use, modify, or distribute this software.*/
/* Please contact [licensing@totaralearning.com] for more information.*/
/**/
/* @author    Kevin Hottinger <kevin.hottinger@totaralearning.com>*/
/* @module tuickage   tui*/

/* This contains the common variable set for form elements,*/
/* allowing form elements to be consistently styled.*/

/* loosely based on a modular scale of (2 * (1.5 ^ n))*/
$tui-char-length-scale: 2, 3, 4, 5, 10, 15, 20, 25, 30, 50, 75, 100;

/* Selectors for form inputs (and similar elements) that should have sizes applied to them.*/
/* If modifying this list in a theme, do it via append() rather than replacing*/
/* the entire list.*/
$tui-form-layout-sized-inputs: (
  'input[type].tui-formInput',
  '.tui-formField',
  '.tui-formTextarea',
  '.tui-inputColor',
  '.tui-range',
  '.tui-select'
);

/* Selectors for inputs that are *replaced elements*.*/
/* The behavior of width: auto differs for replaced elements, so these are set*/
/* to width: 100% to get the "grow to container" behavior.*/
/* https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element*/
/* However, this causes an issue in certain contexts - namely if the container*/
/* has a margin. This list exists to enable workarounds using flex at the site*/
/* of use.*/
/* If modifying this list in a theme, do it via append() rather than replacing*/
/* the entire list.*/
$tui-input-replaced-selectors: (
  'input[type].tui-formInput',
  '.tui-formTextarea',
  '.tui-range',
  '.tui-select'
);

/* Don't apply the default input size if the element is within one of these*/
/* selectors.*/
/* (if it's not within a form, it won't be applied either)*/
$tui-input-no-default-size-parent-selectors: (
  /* minor convenience: split input sets should not have the width set, to save*/
    /* developers from having to pass char-length="full" all the time*/
    '.tui-inputSet--split'
);

/* Calculate character-based sizing for inputs.*/
@function tui-char-length($num) {
  @return calc(#{$num} * var(--form-input-font-size));
}

/* Generate sizing class for size*/
@mixin tui-char-length-class($name, $width) {
  &--charLength-#{$name} {
    max-width: #{$width};
  }
}

/* Default input sizing*/
@mixin tui-char-length-class-form-default() {
  /* Set a custom size for inputs in a limited form*/
  .tui-form--inputWidth-limited &:not(.tui-input--customSize) {
    max-width: var(--form-input-limited-width);
  }
  @each $sel in $tui-input-no-default-size-parent-selectors {
    .tui-form--inputWidth-limited #{$sel} &:not(.tui-input--customSize) {
      max-width: none;
    }
  }
}

/* Generate sizing classes for predefined sizes*/
@mixin tui-char-length-classes() {
  @each $size in $tui-char-length-scale {
    @include tui-char-length-class($size, tui-char-length($size));
  }
  @include tui-char-length-class-form-default();
}

:root {
  /* Height of single line form elements (including padding & border)*/
  --form-input-height: 3rem;
  /* Height of large single line form elements (including padding & border)*/
  --form-input-height-large: 4rem;
  /* Inner font size of form elements*/
  --form-input-font-size: var(--font-size-15);
  /* Inner font size of form elements*/
  --form-input-font-size-sm: var(--font-size-13);
  /* Border size of input elements*/
  --form-input-border-size: 1px;
  /* Vertical padding of single line form elements,*/
  /* the calculation splits the remaining available space to meet the target height.*/
  /* Must be on a single line otherwise it breaks (for some reason!) so must be ignored by prettier.*/
  /* prettier-ignore */
  --form-input-v-padding: calc((var(--form-input-height) - var(--form-input-font-size) - (var(--form-input-border-size) * 2)) / 2);
  --form-input-invalid-shadow-size: 1px;

  /* Width for "limited" width setting*/
  --form-input-limited-width: tui-char-length(20);

  /* Spacing between elements in an InputSet*/
  --input-set-spacing: var(--gap-2);

  --char-length-scale: $tui-char-length-scale;

  /* Offset for radio label*/
  --radio-label-offset: calc(var(--form-radio-size) * 1.35);
}


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jbGllbnQvY29tcG9uZW50L3R1aS9zcmMvZ2xvYmFsX3N0eWxlcy92YXJpYWJsZXMvdHVpX2Zvcm1zLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY2xpZW50L2NvbXBvbmVudC90dWkvYnVpbGQvZ2xvYmFsX3N0eWxlcy92YXJpYWJsZXMvdHVpX2Zvcm1zLmRldmVsb3BtZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBUb3RhcmEgRW50ZXJwcmlzZSBFeHRlbnNpb25zLiovXG4vKiovXG4vKiBDb3B5cmlnaHQgKEMpIDIwMjAgb253YXJkcyBUb3RhcmEgTGVhcm5pbmcgU29sdXRpb25zIExURCovXG4vKiovXG4vKiBUb3RhcmEgRW50ZXJwcmlzZSBFeHRlbnNpb25zIGlzIHByb3ZpZGVkIG9ubHkgdG8gVG90YXJhKi9cbi8qIExlYXJuaW5nIFNvbHV0aW9ucyBMVEQncyBjdXN0b21lcnMgYW5kIHBhcnRuZXJzLCBwdXJzdWFudCB0byovXG4vKiB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgYSBzZXBhcmF0ZSBhZ3JlZW1lbnQgd2l0aCBUb3RhcmEqL1xuLyogTGVhcm5pbmcgU29sdXRpb25zIExURCBvciBpdHMgYWZmaWxpYXRlLiovXG4vKiovXG4vKiBJZiB5b3UgZG8gbm90IGhhdmUgYW4gYWdyZWVtZW50IHdpdGggVG90YXJhIExlYXJuaW5nIFNvbHV0aW9ucyovXG4vKiBMVEQsIHlvdSBtYXkgbm90IGFjY2VzcywgdXNlLCBtb2RpZnksIG9yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZS4qL1xuLyogUGxlYXNlIGNvbnRhY3QgW2xpY2Vuc2luZ0B0b3RhcmFsZWFybmluZy5jb21dIGZvciBtb3JlIGluZm9ybWF0aW9uLiovXG4vKiovXG4vKiBAYXV0aG9yICAgIEtldmluIEhvdHRpbmdlciA8a2V2aW4uaG90dGluZ2VyQHRvdGFyYWxlYXJuaW5nLmNvbT4qL1xuLyogQG1vZHVsZSB0dWlja2FnZSAgIHR1aSovXG5cbi8qIFRoaXMgY29udGFpbnMgdGhlIGNvbW1vbiB2YXJpYWJsZSBzZXQgZm9yIGZvcm0gZWxlbWVudHMsKi9cbi8qIGFsbG93aW5nIGZvcm0gZWxlbWVudHMgdG8gYmUgY29uc2lzdGVudGx5IHN0eWxlZC4qL1xuXG4vKiBsb29zZWx5IGJhc2VkIG9uIGEgbW9kdWxhciBzY2FsZSBvZiAoMiAqICgxLjUgXiBuKSkqL1xuJHR1aS1jaGFyLWxlbmd0aC1zY2FsZTogMiwgMywgNCwgNSwgMTAsIDE1LCAyMCwgMjUsIDMwLCA1MCwgNzUsIDEwMDtcblxuLyogU2VsZWN0b3JzIGZvciBmb3JtIGlucHV0cyAoYW5kIHNpbWlsYXIgZWxlbWVudHMpIHRoYXQgc2hvdWxkIGhhdmUgc2l6ZXMgYXBwbGllZCB0byB0aGVtLiovXG4vKiBJZiBtb2RpZnlpbmcgdGhpcyBsaXN0IGluIGEgdGhlbWUsIGRvIGl0IHZpYSBhcHBlbmQoKSByYXRoZXIgdGhhbiByZXBsYWNpbmcqL1xuLyogdGhlIGVudGlyZSBsaXN0LiovXG4kdHVpLWZvcm0tbGF5b3V0LXNpemVkLWlucHV0czogKFxuICAnaW5wdXRbdHlwZV0udHVpLWZvcm1JbnB1dCcsXG4gICcudHVpLWZvcm1GaWVsZCcsXG4gICcudHVpLWZvcm1UZXh0YXJlYScsXG4gICcudHVpLWlucHV0Q29sb3InLFxuICAnLnR1aS1yYW5nZScsXG4gICcudHVpLXNlbGVjdCdcbik7XG5cbi8qIFNlbGVjdG9ycyBmb3IgaW5wdXRzIHRoYXQgYXJlICpyZXBsYWNlZCBlbGVtZW50cyouKi9cbi8qIFRoZSBiZWhhdmlvciBvZiB3aWR0aDogYXV0byBkaWZmZXJzIGZvciByZXBsYWNlZCBlbGVtZW50cywgc28gdGhlc2UgYXJlIHNldCovXG4vKiB0byB3aWR0aDogMTAwJSB0byBnZXQgdGhlIFwiZ3JvdyB0byBjb250YWluZXJcIiBiZWhhdmlvci4qL1xuLyogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL1JlcGxhY2VkX2VsZW1lbnQqL1xuLyogSG93ZXZlciwgdGhpcyBjYXVzZXMgYW4gaXNzdWUgaW4gY2VydGFpbiBjb250ZXh0cyAtIG5hbWVseSBpZiB0aGUgY29udGFpbmVyKi9cbi8qIGhhcyBhIG1hcmdpbi4gVGhpcyBsaXN0IGV4aXN0cyB0byBlbmFibGUgd29ya2Fyb3VuZHMgdXNpbmcgZmxleCBhdCB0aGUgc2l0ZSovXG4vKiBvZiB1c2UuKi9cbi8qIElmIG1vZGlmeWluZyB0aGlzIGxpc3QgaW4gYSB0aGVtZSwgZG8gaXQgdmlhIGFwcGVuZCgpIHJhdGhlciB0aGFuIHJlcGxhY2luZyovXG4vKiB0aGUgZW50aXJlIGxpc3QuKi9cbiR0dWktaW5wdXQtcmVwbGFjZWQtc2VsZWN0b3JzOiAoXG4gICdpbnB1dFt0eXBlXS50dWktZm9ybUlucHV0JyxcbiAgJy50dWktZm9ybVRleHRhcmVhJyxcbiAgJy50dWktcmFuZ2UnLFxuICAnLnR1aS1zZWxlY3QnXG4pO1xuXG4vKiBEb24ndCBhcHBseSB0aGUgZGVmYXVsdCBpbnB1dCBzaXplIGlmIHRoZSBlbGVtZW50IGlzIHdpdGhpbiBvbmUgb2YgdGhlc2UqL1xuLyogc2VsZWN0b3JzLiovXG4vKiAoaWYgaXQncyBub3Qgd2l0aGluIGEgZm9ybSwgaXQgd29uJ3QgYmUgYXBwbGllZCBlaXRoZXIpKi9cbiR0dWktaW5wdXQtbm8tZGVmYXVsdC1zaXplLXBhcmVudC1zZWxlY3RvcnM6IChcbiAgLyogbWlub3IgY29udmVuaWVuY2U6IHNwbGl0IGlucHV0IHNldHMgc2hvdWxkIG5vdCBoYXZlIHRoZSB3aWR0aCBzZXQsIHRvIHNhdmUqL1xuICAgIC8qIGRldmVsb3BlcnMgZnJvbSBoYXZpbmcgdG8gcGFzcyBjaGFyLWxlbmd0aD1cImZ1bGxcIiBhbGwgdGhlIHRpbWUqL1xuICAgICcudHVpLWlucHV0U2V0LS1zcGxpdCdcbik7XG5cbi8qIENhbGN1bGF0ZSBjaGFyYWN0ZXItYmFzZWQgc2l6aW5nIGZvciBpbnB1dHMuKi9cbkBmdW5jdGlvbiB0dWktY2hhci1sZW5ndGgoJG51bSkge1xuICBAcmV0dXJuIGNhbGMoI3skbnVtfSAqIHZhcigtLWZvcm0taW5wdXQtZm9udC1zaXplKSk7XG59XG5cbi8qIEdlbmVyYXRlIHNpemluZyBjbGFzcyBmb3Igc2l6ZSovXG5AbWl4aW4gdHVpLWNoYXItbGVuZ3RoLWNsYXNzKCRuYW1lLCAkd2lkdGgpIHtcbiAgJi0tY2hhckxlbmd0aC0jeyRuYW1lfSB7XG4gICAgbWF4LXdpZHRoOiAjeyR3aWR0aH07XG4gIH1cbn1cblxuLyogRGVmYXVsdCBpbnB1dCBzaXppbmcqL1xuQG1peGluIHR1aS1jaGFyLWxlbmd0aC1jbGFzcy1mb3JtLWRlZmF1bHQoKSB7XG4gIC8qIFNldCBhIGN1c3RvbSBzaXplIGZvciBpbnB1dHMgaW4gYSBsaW1pdGVkIGZvcm0qL1xuICAudHVpLWZvcm0tLWlucHV0V2lkdGgtbGltaXRlZCAmOm5vdCgudHVpLWlucHV0LS1jdXN0b21TaXplKSB7XG4gICAgbWF4LXdpZHRoOiB2YXIoLS1mb3JtLWlucHV0LWxpbWl0ZWQtd2lkdGgpO1xuICB9XG4gIEBlYWNoICRzZWwgaW4gJHR1aS1pbnB1dC1uby1kZWZhdWx0LXNpemUtcGFyZW50LXNlbGVjdG9ycyB7XG4gICAgLnR1aS1mb3JtLS1pbnB1dFdpZHRoLWxpbWl0ZWQgI3skc2VsfSAmOm5vdCgudHVpLWlucHV0LS1jdXN0b21TaXplKSB7XG4gICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgfVxuICB9XG59XG5cbi8qIEdlbmVyYXRlIHNpemluZyBjbGFzc2VzIGZvciBwcmVkZWZpbmVkIHNpemVzKi9cbkBtaXhpbiB0dWktY2hhci1sZW5ndGgtY2xhc3NlcygpIHtcbiAgQGVhY2ggJHNpemUgaW4gJHR1aS1jaGFyLWxlbmd0aC1zY2FsZSB7XG4gICAgQGluY2x1ZGUgdHVpLWNoYXItbGVuZ3RoLWNsYXNzKCRzaXplLCB0dWktY2hhci1sZW5ndGgoJHNpemUpKTtcbiAgfVxuICBAaW5jbHVkZSB0dWktY2hhci1sZW5ndGgtY2xhc3MtZm9ybS1kZWZhdWx0KCk7XG59XG5cbjpyb290IHtcbiAgLyogSGVpZ2h0IG9mIHNpbmdsZSBsaW5lIGZvcm0gZWxlbWVudHMgKGluY2x1ZGluZyBwYWRkaW5nICYgYm9yZGVyKSovXG4gIC0tZm9ybS1pbnB1dC1oZWlnaHQ6IDNyZW07XG4gIC8qIEhlaWdodCBvZiBsYXJnZSBzaW5nbGUgbGluZSBmb3JtIGVsZW1lbnRzIChpbmNsdWRpbmcgcGFkZGluZyAmIGJvcmRlcikqL1xuICAtLWZvcm0taW5wdXQtaGVpZ2h0LWxhcmdlOiA0cmVtO1xuICAvKiBJbm5lciBmb250IHNpemUgb2YgZm9ybSBlbGVtZW50cyovXG4gIC0tZm9ybS1pbnB1dC1mb250LXNpemU6IHZhcigtLWZvbnQtc2l6ZS0xNSk7XG4gIC8qIElubmVyIGZvbnQgc2l6ZSBvZiBmb3JtIGVsZW1lbnRzKi9cbiAgLS1mb3JtLWlucHV0LWZvbnQtc2l6ZS1zbTogdmFyKC0tZm9udC1zaXplLTEzKTtcbiAgLyogQm9yZGVyIHNpemUgb2YgaW5wdXQgZWxlbWVudHMqL1xuICAtLWZvcm0taW5wdXQtYm9yZGVyLXNpemU6IDFweDtcbiAgLyogVmVydGljYWwgcGFkZGluZyBvZiBzaW5nbGUgbGluZSBmb3JtIGVsZW1lbnRzLCovXG4gIC8qIHRoZSBjYWxjdWxhdGlvbiBzcGxpdHMgdGhlIHJlbWFpbmluZyBhdmFpbGFibGUgc3BhY2UgdG8gbWVldCB0aGUgdGFyZ2V0IGhlaWdodC4qL1xuICAvKiBNdXN0IGJlIG9uIGEgc2luZ2xlIGxpbmUgb3RoZXJ3aXNlIGl0IGJyZWFrcyAoZm9yIHNvbWUgcmVhc29uISkgc28gbXVzdCBiZSBpZ25vcmVkIGJ5IHByZXR0aWVyLiovXG4gIC8qIHByZXR0aWVyLWlnbm9yZSAqL1xuICAtLWZvcm0taW5wdXQtdi1wYWRkaW5nOiBjYWxjKCh2YXIoLS1mb3JtLWlucHV0LWhlaWdodCkgLSB2YXIoLS1mb3JtLWlucHV0LWZvbnQtc2l6ZSkgLSAodmFyKC0tZm9ybS1pbnB1dC1ib3JkZXItc2l6ZSkgKiAyKSkgLyAyKTtcbiAgLS1mb3JtLWlucHV0LWludmFsaWQtc2hhZG93LXNpemU6IDFweDtcblxuICAvKiBXaWR0aCBmb3IgXCJsaW1pdGVkXCIgd2lkdGggc2V0dGluZyovXG4gIC0tZm9ybS1pbnB1dC1saW1pdGVkLXdpZHRoOiB0dWktY2hhci1sZW5ndGgoMjApO1xuXG4gIC8qIFNwYWNpbmcgYmV0d2VlbiBlbGVtZW50cyBpbiBhbiBJbnB1dFNldCovXG4gIC0taW5wdXQtc2V0LXNwYWNpbmc6IHZhcigtLWdhcC0yKTtcblxuICAtLWNoYXItbGVuZ3RoLXNjYWxlOiAkdHVpLWNoYXItbGVuZ3RoLXNjYWxlO1xuXG4gIC8qIE9mZnNldCBmb3IgcmFkaW8gbGFiZWwqL1xuICAtLXJhZGlvLWxhYmVsLW9mZnNldDogY2FsYyh2YXIoLS1mb3JtLXJhZGlvLXNpemUpICogMS4zNSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9